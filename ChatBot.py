import logging
import sqlite3
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from config import TOKEN

DB_NAME = 'solar_system.sqlite'

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

HELLO_TEXT = """
–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –æ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ üåûü™ê
–í–æ—Ç, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å:
- –ù–∞–ø–∏—à–∏ "–°–æ–ª–Ω—Ü–µ", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- –ù–∞–ø–∏—à–∏ "–ú–µ—Ä–∫—É—Ä–∏–π", "–ó–µ–º–ª—è", ..., "–ù–µ–ø—Ç—É–Ω" –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ—Ç–µ
- –ù–∞–ø–∏—à–∏ "–ê—Å—Ç–µ—Ä–æ–∏–¥—ã", "–ö–æ–º–µ—Ç—ã"
"""


# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ===
def clean_value(value):
    if not value:
        return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    value = str(value).strip()
    value = value.replace(',', '.').replace(' ', '').replace('‚ãÖ', '√ó')
    return value


def get_sun_info(field):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(f"SELECT `{field}` FROM Sun WHERE `id Sun` = 1")
    result = cursor.fetchone()
    conn.close()
    return clean_value(result[0]) if result else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"


def get_planet_by_name(planet_name):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Planets WHERE title=?", (planet_name,))
    result = cursor.fetchone()
    conn.close()
    return result


def get_small_body_by_name(body_name):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Small_Celestial_Bodies WHERE title=?", (body_name,))
    result = cursor.fetchone()
    conn.close()
    return result


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start(update: ContextTypes.DEFAULT_TYPE, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELLO_TEXT)


async def handle_message(update: ContextTypes.DEFAULT_TYPE, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{text}'")

    # ==== –°–û–õ–ù–¶–ï ====
    if text == "—Å–æ–ª–Ω—Ü–µ":
        reply = """
        –ü—Ä–æ –°–æ–ª–Ω—Ü–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å:
    - –ø–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    - –æ–±—ä–µ–º
    - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —è–¥—Ä–∞
    - –º–∞—Å—Å–∞
    - –¥–∏–∞–º–µ—Ç—Ä
    """
        context.user_data['mode'] = 'sun'
        await update.message.reply_text(reply)

    elif context.user_data.get('mode') == 'sun':
        if any(k in text for k in ["–ø–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏", "–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å"]):
            value = get_sun_info("surface area(m^2)")
            await update.message.reply_text(f"–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞: {value} –º¬≤")

        elif "–æ–±—ä–µ–º" in text:
            value = get_sun_info("volume(m^3)")
            await update.message.reply_text(f"–û–±—ä–µ–º –°–æ–ª–Ω—Ü–∞: {value} –º¬≥")

        elif "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" in text or "—è–¥—Ä–æ" in text:
            value = get_sun_info("core temperature(K)")
            await update.message.reply_text(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —è–¥—Ä–∞ –°–æ–ª–Ω—Ü–∞: {value} K")

        elif "–º–∞—Å—Å–∞" in text:
            value = get_sun_info("weight(kg)")
            await update.message.reply_text(f"–ú–∞—Å—Å–∞ –°–æ–ª–Ω—Ü–∞: {value} –∫–≥")

        elif "–¥–∏–∞–º–µ—Ç—Ä" in text:
            value = get_sun_info("diameter(m)")
            await update.message.reply_text(f"–î–∏–∞–º–µ—Ç—Ä –°–æ–ª–Ω—Ü–∞: {value} –º")

        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    # ==== –ü–õ–ê–ù–ï–¢–´ ====
    elif any(p.lower() in text for p in ["–º–µ—Ä–∫—É—Ä–∏–π", "–≤–µ–Ω–µ—Ä–∞", "–∑–µ–º–ª—è", "–º–∞—Ä—Å", "—é–ø–∏—Ç–µ—Ä", "—Å–∞—Ç—É—Ä–Ω", "—É—Ä–∞–Ω", "–Ω–µ–ø—Ç—É–Ω"]):
        planet = next(p for p in ["–ú–µ—Ä–∫—É—Ä–∏–π", "–í–µ–Ω–µ—Ä–∞", "–ó–µ–º–ª—è", "–ú–∞—Ä—Å", "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω", "–£—Ä–∞–Ω", "–ù–µ–ø—Ç—É–Ω"] if
                      p.lower() in text)
        info = get_planet_by_name(planet)
        if info:
            columns = [
                "ID",
                "–û–¥–∏–Ω –∏–∑ —Å–ø—É—Ç–Ω–∏–∫–æ–≤",
                "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "–û—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—Å)",
                "–ü–µ—Ä–∏–æ–¥ –≤—Ä–∞—â–µ–Ω–∏—è (–¥–Ω–µ–π)",
                "–ß–∏—Å–ª–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤",
                "–¢–∏–ø",
                "–ú–∞—Å—Å–∞ (–∫–≥)"
            ]
            reply = f"""
            –ü—Ä–æ {planet} –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å:
            - –û—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            - –ü–µ—Ä–∏–æ–¥ –≤—Ä–∞—â–µ–Ω–∏—è
            - –ß–∏—Å–ª–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤
            - –¢–∏–ø
            - –ú–∞—Å—Å–∞
            """
            context.user_data['mode'] = 'planet'
            context.user_data['selected_planet'] = planet
            await update.message.reply_text(reply)
        else:
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif context.user_data.get('mode') == 'planet':
        planet = context.user_data.get('selected_planet')
        info = get_planet_by_name(planet)
        if not info:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–µ—Ç–µ –ø–æ—Ç–µ—Ä—è–Ω—ã.")
            return

        if "–æ—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å" in text:
            await update.message.reply_text(f"–û—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, {planet}: {clean_value(info[3])} –∫–º/—Å")

        elif "–ø–µ—Ä–∏–æ–¥ –≤—Ä–∞—â–µ–Ω–∏—è" in text:
            await update.message.reply_text(f"–ü–µ—Ä–∏–æ–¥ –≤—Ä–∞—â–µ–Ω–∏—è, {planet}: {clean_value(info[4])} –¥–Ω–µ–π")

        elif "—á–∏—Å–ª–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤" in text:
            await update.message.reply_text(f"–ß–∏—Å–ª–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤, {planet}: {clean_value(info[5])}")

        elif "—Ç–∏–ø" in text:
            await update.message.reply_text(f"–¢–∏–ø –ø–ª–∞–Ω–µ—Ç—ã, {planet}: {clean_value(info[6])}")

        elif "–º–∞—Å—Å–∞" in text:
            await update.message.reply_text(f"–ú–∞—Å—Å–∞, {planet}: {clean_value(info[7])} –∫–≥")

        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    # ==== –ê–°–¢–ï–†–û–ò–î–´ / –ö–û–ú–ï–¢–´ ====
    elif any(b in text for b in ["C/2024 G3", "2022 YO1", "2011 CQ1"]):
        body = next(b for b in ["C/2024 G3", "2022 YO1", "2011 CQ1"] if b.lower() in text)
        info = get_small_body_by_name(body)
        if info:
            reply = f"""
            –ü—Ä–æ {body} –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å:
            - –û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–ª–µ—Ç)
            - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (–¥–Ω–µ–π)
            """
            context.user_data['mode'] = 'small_body'
            context.user_data['selected_body'] = body
            await update.message.reply_text(reply)
        else:
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif context.user_data.get('mode') == 'small_body':
        body = context.user_data.get('selected_body')
        info = get_small_body_by_name(body)
        if not info:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–ª–µ –ø–æ—Ç–µ—Ä—è–Ω—ã.")
            return

        if "–æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥" in text:
            await update.message.reply_text(f"–û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ {body}: {clean_value(info[3])} –ª–µ—Ç")

        elif "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–π" in text:
            await update.message.reply_text(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ {body}: {clean_value(info[4])} –¥–Ω–µ–π")

        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    # ==== –î–†–£–ì–ò–ï –ö–û–ú–ê–ù–î–´ ====
    elif "–ø–ª–∞–Ω–µ—Ç—ã" in text:
        planets = ["–ú–µ—Ä–∫—É—Ä–∏–π", "–í–µ–Ω–µ—Ä–∞", "–ó–µ–º–ª—è", "–ú–∞—Ä—Å", "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω", "–£—Ä–∞–Ω", "–ù–µ–ø—Ç—É–Ω"]
        await update.message.reply_text("–ü–ª–∞–Ω–µ—Ç—ã –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:\n" + "\n".join(planets))

    elif any(k in text for k in ["–∞—Å—Ç–µ—Ä–æ–∏–¥", "–∫–æ–º–µ—Ç–∞", "–º–∞–ª—ã–µ —Ç–µ–ª–∞"]):
        info = """
        –ú–∞–ª—ã–µ –Ω–µ–±–µ—Å–Ω—ã–µ —Ç–µ–ª–∞:
        - C/2024 G3 (–∫–æ–º–µ—Ç–∞)
        - 2022 YO1 (–∞—Å—Ç–µ—Ä–æ–∏–¥)
        - 2011 CQ1 (–∞—Å—Ç–µ—Ä–æ–∏–¥)

        –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä.
        """
        await update.message.reply_text(info)

    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ===
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()